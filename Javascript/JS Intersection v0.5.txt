	var QueueW = [];
	var QueueE = [];
	var QueueS = [];
	var carCount = 0; // indicates number of cars currently in the intersection

// T-Intersection right-hand-rule
//fires the car which has priority and lets the others wait
exports.setup = function () {
	//the Input-ports for the incoming cars
    this.input('carWEST');
    this.input('carEAST');
    this.input('carSOUTH');
    //the Output-ports for the leaving cars
    this.output('OWEST');
    this.output('OEAST');
    this.output('OSOUTH');
}

exports.initialize = function () {
	//creates an Array that contains the cars that stand in an Intersection
	
	this.addInputHandler('carWEST', function() {
		QueueW.unshift(this.get('carWEST'));
		carCount++;
		right_hand_rule();
	});
	
	this.addInputHandler('carEAST', function() {
		QueueE.unshift(this.get('carEAST'));
		carCount++;
		right_hand_rule();
	});
	
	this.addInputHandler('carSOUTH', function() {
		QueueS.unshift(this.get('carSOUTH'));
		carCount++;
		right_hand_rule();
	});
	
}
	
	function right_hand_rule() {
			if(QueueW.length != 0) {
				if(QueueW[QueueW.length - 1].indicator == 0) {
					if(QueueS.length != 0) {
						//stop
					}else if(QueueS.length == 0) {
						this.send('OEAST',QueueW[QueueW.length - 1]);
						QueueW.pop();
						carCount--;
					}
				}else if(QueueW[QueueW.length - 1].indicator == 1) {
					this.send('OSOUTH',QueueW[QueueW.length - 1]);
					QueueW.pop();
					carCount--;
				}
			}
			
			if(QueueE.length != 0) {
				if(QueueE[QueueE.length - 1].indicator == 0) {
					this.send('OWEST',QueueE[QueueE.length - 1]);
					QueueE.pop();
					carCount--;
				}else if(QueueE[QueueE.length - 1].indicator == -1) {
					if(QueueW.length != 0) {
						//stop
					}else if(QueueW.length == 0) {
						this.send('OSOUTH',QueueE[QueueE.length - 1]);
						QueueE.pop();
						carCount--;
					}
				}
			}
			
			if(QueueS.length != 0) {
				if(QueueS[QueueS.length - 1].indicator == 1) {
					this.send('OEAST',QueueS[QueueS.length - 1]);
					QueueS.pop();
					carCount--;
				}else if(QueueS[QueueS.length - 1].indicator == -1) {
					if(QueueE.length != 0) {
						//stop
					}else if(QueueE.length == 0) {
						this.send('OWEST',QueueS[QueueS.length - 1]);
						QueueS.pop();
						carCount--;
					}
				}
			}
	}